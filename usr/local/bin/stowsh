#!/bin/bash

CONFIG_PATH="${HOME}/.stowsh";
DOTFILES_URL="${DOTFILES_URL:-git@github.com:cjvirtucio87/dotfiles.git}";
DOTFILES_PLATFORM="${DOTFILES_PLATFORM:-ubuntu}";
LOG_LEVEL="${LOG_LEVEL:-INFO}";
DOTFILES_DEPLOY_DIR="${DOTFILES_DEPLOY_DIR:-/mnt/c/Users/cjv28}";

read -r -d '' INSTALL_USAGE <<'EOF'
stowsh
[summary]
Command for installing your dotfiles.

[description]
Install your dotfiles by cloning them from $DOTFILES_URL, copying the files in the $DOTFILES_PLATFORM of 
your project, and deploying them to $DOTFILES_DEPLOY_DIR. Then, create symbolic links in your $HOME directory
pointing to the files in your $DOTFILES_DEPLOY_DIR.

[usage]
- View this help message:
stowsh -h

- Clean up the $HOME/.stowsh folder before executing:
stowsh -c

- Clean up the $HOME/.stowsh folder after executing:
stowsh -d

- Execute with a log level of DEBUG:
LOG_LEVEL=debug stowsh
EOF

clean() {
  local staging_dir

  if [ -d "${CONFIG_PATH}" ]; then
    if [ -f "${CONFIG_PATH}/staging_dir" ]; then
      staging_dir="$(cat $CONFIG_PATH/staging_dir)";

      if [ -d "${staging_dir}" ]; then
        log_debug "cleaning staging_dir, ${staging_dir}";

        rm -rf "${staging_dir}";
      else
        log_warn "staging_dir, ${staging_dir}, does not exist; skipping removal";
      fi
    else
      log_warn "staging_dir file at ${CONFIG_PATH}/staging_dir does not exist; skipping removal";
    fi

    log_debug "cleaning config directory, ${CONFIG_PATH}";
    rm -rf "${CONFIG_PATH}";
  else
    log_warn "used --clean-pre/--clean-post flag when directory ${CONFIG_PATH} does not exist; skipping removal";
  fi
}

deploy_dotfiles() {
  local src_dir=$1;
  local dest_dir=$2;  

  rsync -av $src_dir/.[^.]* "${dest_dir}";
}

log_debug() {
  if [[ $(echo $LOG_LEVEL | awk '{print tolower($0)}') =~ ^(debug|error)$ ]]; then
    echo "[DEBUG] ${1}";
  fi
}

log_error() {
  if [[ $(echo $LOG_LEVEL | awk '{print tolower($0)}') =~ ^(info|debug|error)$ ]]; then
    echo "[ERROR] ${1}";
  fi
}

log_warn() {
  if [[ $(echo $LOG_LEVEL | awk '{print tolower($0)}') =~ ^(info|warn|debug|error)$ ]]; then
    echo "[WARN] ${1}";
  fi
}

symlink_to_src() {
  local src_dir=$1;
  local dest_dir=$2;

  find $src_dir \
    -maxdepth 1 \
    -mindepth 1 \
    -name '.*' \
    -exec bash -c "symlink_name=\"${dest_dir}/\$(basename {})\"; if [ ! -L \"\${symlink_name}\" ]; then ln -s {} \"\${symlink_name}\"; fi" \;
}

main() {
  log_debug "validating required variables";

  if [ ! -d "${HOME}" ]; then
    log-error "HOME, ${HOME}, does not exist";
    exit 1;
  fi

  if [ ! -d "${DOTFILES_DEPLOY_DIR}" ]; then
    log_error "DOTFILES_DEPLOY_DIR, ${DOTFILES_DEPLOY_DIR}, does not exist";
    exit 1;
  fi

  local clean_post
  local clean_pre

  while (( "$#" )); do
    case "$1" in
      '-d' | '--clean-post')
        clean_post=1;
        shift;
        ;;
      '-c' | '--clean-pre')
        clean_pre=1;
        shift;
        ;;
      '-h' | '--help')
        echo "${INSTALL_USAGE}";
        exit 0;
        ;;
      *)
    esac
  done

  if [ -n "${clean_pre}" ]; then
    log_debug "cleaning prior to install";
    clean
  fi

  if [ ! -d "${CONFIG_PATH}" ]; then
    log_debug "initializing config folder at ${CONFIG_PATH}";

    mkdir "${CONFIG_PATH}";
  fi

  local staging_dir

  if [ -f "${CONFIG_PATH}/staging_dir" ]; then
    staging_dir="$(cat $CONFIG_PATH/staging_dir)";
    log_debug "${CONFIG_PATH}/staging_dir file already exists; skipping creation";
  else
    staging_dir=$(mktemp -d);
    log_debug "created staging directory ${staging_dir}";

    echo "${staging_dir}" > "${CONFIG_PATH}/staging_dir";
    log_debug "created staging_dir file with staging_dir, ${staging_dir}";
  fi

  if [ -d "${staging_dir}/git/dotfiles" ]; then
    log_debug "${CONFIG_PATH}/git/dotfiles already exists; skipping cloning";
  else 
    git clone "${DOTFILES_URL}" "${staging_dir}/git/dotfiles";
  fi

  local src_dir="${staging_dir}/git/dotfiles/${DOTFILES_PLATFORM}";

  log_debug "deploying dotfiles from ${src_dir} to ${DOTFILES_DEPLOY_DIR}";

  deploy_dotfiles "${src_dir}" "${DOTFILES_DEPLOY_DIR}";

  log_debug "creating symlinks in ${HOME} to dotfiles in ${DOTFILES_DEPLOY_DIR}";

  symlink_to_src "${DOTFILES_DEPLOY_DIR}" "${HOME}";

  if [ -n "${clean_post}" ]; then
    log_debug "cleaning after install";
    clean
  fi
}

main "$@";
